services:
  # NGINX REVERSE PROXY
  nginx:
    extends:
      file: ./nginx/docker-compose.yml
      service: nginx
    env_file:
      - ./.env
    depends_on:
      keycloak:
        condition: service_started
      gateway-service:
        condition: service_healthy
      ashs-frontend:
        condition: service_started
      ashs-frontend-admin:
        condition: service_started
      grafana:
        condition: service_healthy
        
  nginx-exporter:
    extends:
      file: ./nginx/docker-compose.yml
      service: nginx-exporter
    depends_on:
      nginx:
        condition: service_started

  # OBSERVABILITY SERVICES
  prometheus:
    extends:
      file: ./observability/docker-compose.yml
      service: prometheus
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  tempo:
    extends:
      file: ./observability/docker-compose.yml
      service: tempo
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3200/status" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  loki:
    extends:
      file: ./observability/docker-compose.yml
      service: loki
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3100/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  grafana:
    extends:
      file: ./observability/docker-compose.yml
      service: grafana
    env_file:
      - ./.env
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    depends_on:
      prometheus:
        condition: service_healthy
      tempo:
        condition: service_healthy
      loki:
        condition: service_healthy

  # KEYCLOAK SERVICES
  postgres-kc:
    extends:
      file: ./keycloak/docker-compose.yml
      service: postgres-kc
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  keycloak:
    extends:
      file: ./keycloak/docker-compose.yml
      service: keycloak
    depends_on:
      postgres-kc:
        condition: service_healthy

  # DATABASE SERVICES
  postgres-training-service:
    image: postgres:17.4
    container_name: training-service-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: training-db
    volumes:
      - postgres_data_training_service:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend-network

  postgres-facebook-service:
    image: postgres:17.4
    container_name: facebook-service-db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: facebook-db
    volumes:
      - postgres_data_facebook_service:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - backend-network


  # BACKEND SERVICES
  config-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/ashs-config-service:${GIT_VERSION}
    container_name: config-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - CONFIG_SERVICE_KEYSTORE_PASS=${CONFIG_SERVICE_KEYSTORE_PASS}
      - CONFIG_SERVER_URI=https://github.com/bbsebb/temp-configuration.git
      - EUREKA_SERVER_URI=${INTERNAL_DISCOVERY_URL}
      - ZIPKIN_TRACING_ENDPOINT=${INTERNAL_ZIPKIN_ENDPOINT}
      - LOKI_URL=${INTERNAL_LOKI_URL}
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      tempo:
        condition: service_healthy
      prometheus:
        condition: service_healthy
      grafana:
        condition: service_healthy
      loki:
        condition: service_healthy
    networks:
      - backend-network
      - observability-network


  discovery-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/ashs-discovery-service:${GIT_VERSION}
    container_name: discovery-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - CONFIG_SERVER=${INTERNAL_CONFIG_SERVER}
      - EUREKA_SERVER_URI=${INTERNAL_DISCOVERY_URL}
      - ZIPKIN_TRACING_ENDPOINT=${INTERNAL_ZIPKIN_ENDPOINT}
      - LOKI_URL=${INTERNAL_LOKI_URL}
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8761/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      config-service:
        condition: service_healthy
    networks:
      - backend-network
      - observability-network



  gateway-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/ashs-gateway-service:${GIT_VERSION}
    container_name: gateway-service
    # Ports now exposed through nginx
    # ports:
    #   - "8080:8080"  # Main API gateway - now accessed via nginx
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - CONFIG_SERVER=${INTERNAL_CONFIG_SERVER}
      - EUREKA_SERVER_URI=${INTERNAL_DISCOVERY_URL}
      - ZIPKIN_TRACING_ENDPOINT=${INTERNAL_ZIPKIN_ENDPOINT}
      - SECURITY_OAUTH2_JWT_ISSUER_URI=${JWT_ISSUER_URI}
      - SECURITY_OAUTH2_JWT_JWK_URI=${INTERNAL_KEYCLOAK_URL}
      - LOKI_URL=${INTERNAL_LOKI_URL}
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    networks:
      - backend-network
      - observability-network
      - keycloak-network

  contact-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/ashs-contact-service:${GIT_VERSION}
    container_name: contact-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - CONFIG_SERVER=${INTERNAL_CONFIG_SERVER}
      - EUREKA_SERVER_URI=${INTERNAL_DISCOVERY_URL}
      - ZIPKIN_TRACING_ENDPOINT=${INTERNAL_ZIPKIN_ENDPOINT}
      - SECURITY_OAUTH2_JWT_ISSUER_URI=${JWT_ISSUER_URI}
      - SECURITY_OAUTH2_JWT_JWK_URI=${INTERNAL_KEYCLOAK_URL}
      - CONTACT_MAIL=${CONTACT_MAIL}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - LOKI_URL=${INTERNAL_LOKI_URL}
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
    networks:
      - backend-network
      - observability-network
      - keycloak-network

  training-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/ashs-training-service:${GIT_VERSION}
    container_name: training-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - CONFIG_SERVER=${INTERNAL_CONFIG_SERVER}
      - EUREKA_SERVER_URI=${INTERNAL_DISCOVERY_URL}
      - ZIPKIN_TRACING_ENDPOINT=${INTERNAL_ZIPKIN_ENDPOINT}
      - SECURITY_OAUTH2_JWT_ISSUER_URI=${JWT_ISSUER_URI}
      - SECURITY_OAUTH2_JWT_JWK_URI=${INTERNAL_KEYCLOAK_URL}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-training-service:5432/training-db
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - LOKI_URL=${INTERNAL_LOKI_URL}
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8082/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      postgres-training-service:
        condition: service_healthy
    networks:
      - backend-network
      - observability-network
      - keycloak-network

  facebook-service:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/ashs-facebook-service:${GIT_VERSION}
    container_name: facebook-service
    environment:
      - SPRING_PROFILES_ACTIVE=prod
      - CONFIG_SERVER=${INTERNAL_CONFIG_SERVER}
      - EUREKA_SERVER_URI=${INTERNAL_DISCOVERY_URL}
      - ZIPKIN_TRACING_ENDPOINT=${INTERNAL_ZIPKIN_ENDPOINT}
      - SECURITY_OAUTH2_JWT_ISSUER_URI=${JWT_ISSUER_URI}
      - SECURITY_OAUTH2_JWT_JWK_URI=${INTERNAL_KEYCLOAK_URL}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-facebook-service:5432/facebook-db
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - LOKI_URL=${INTERNAL_LOKI_URL}
      - FACEBOOK_API_URI=${FACEBOOK_API_URI}
      - FACEBOOK_CLIENT_ID=${FACEBOOK_CLIENT_ID}
      - FACEBOOK_CLIENT_SECRET=${FACEBOOK_CLIENT_SECRET}
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8083/actuator/health" ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 60s
    depends_on:
      discovery-service:
        condition: service_healthy
      config-service:
        condition: service_healthy
      postgres-facebook-service:
        condition: service_healthy
    networks:
      - backend-network
      - observability-network
      - keycloak-network

  # FRONTEND APPLICATIONS
  ashs-frontend:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/ashs-ashs-frontend:${GIT_VERSION}
    container_name: ashs-frontend
    # Ports now exposed through nginx
    # ports:
    #   - "4200:80"  # Main frontend - now accessed via nginx
    depends_on:
      contact-service:
        condition: service_healthy
      facebook-service:
        condition: service_healthy
      training-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
    networks:
      - backend-network

  ashs-frontend-admin:
    image: ghcr.io/${GITHUB_REPOSITORY_OWNER}/ashs-ashs-frontend-admin:${GIT_VERSION}
    container_name: ashs-frontend-admin
    # Ports now exposed through nginx
    # ports:
    #   - "4201:80"  # Admin frontend - now accessed via nginx
    depends_on:
      contact-service:
        condition: service_healthy
      facebook-service:
        condition: service_healthy
      training-service:
        condition: service_healthy
      gateway-service:
        condition: service_healthy
    networks:
      - backend-network

networks:
  observability-network:
    driver: bridge
  keycloak-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  prometheus_data:
  tempo_data:
  loki_data:
  grafana_data:
  postgres_data_kc:
  keycloak_data:
  postgres_data_training_service:
  postgres_data_facebook_service:
